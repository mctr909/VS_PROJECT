#pragma once
#include <windows.h>

namespace DLS {
	enum SRC_TYPE : USHORT {
		// MODULATOR SOURCES
		SRC_TYPE_NONE = 0x0000,
		SRC_TYPE_LFO = 0x0001,
		SRC_TYPE_KEY_ON_VELOCITY = 0x0002,
		SRC_TYPE_KEY_NUMBER = 0x0003,
		SRC_TYPE_EG1 = 0x0004,
		SRC_TYPE_EG2 = 0x0005,
		SRC_TYPE_PITCH_WHEEL = 0x0006,
		SRC_TYPE_POLY_PRESSURE = 0x0007,
		SRC_TYPE_CHANNEL_PRESSURE = 0x0008,
		SRC_TYPE_VIBRATO = 0x0009,

		// MIDI CONTROLLER SOURCES
		SRC_TYPE_CC1 = 0x0081,
		SRC_TYPE_CC7 = 0x0087,
		SRC_TYPE_CC10 = 0x008A,
		SRC_TYPE_CC11 = 0x008B,
		SRC_TYPE_CC91 = 0x00DB,
		SRC_TYPE_CC93 = 0x00DD,

		// REGISTERED PARAMETER NUMBERS
		SRC_TYPE_RPN0 = 0x0100,
		SRC_TYPE_RPN1 = 0x0101,
		SRC_TYPE_RPN2 = 0x0102
	};

	enum DST_TYPE : USHORT {
		// GENERIC DESTINATIONS
		DST_TYPE_NONE = 0x0000,
		DST_TYPE_ATTENUATION = 0x0001,
		DST_TYPE_RESERVED = 0x0002,
		DST_TYPE_PITCH = 0x0003,
		DST_TYPE_PAN = 0x0004,
		DST_TYPE_KEY_NUMBER = 0x0005,

		// CHANNEL OUTPUT DESTINATIONS
		DST_TYPE_LEFT = 0x0010,
		DST_TYPE_RIGHT = 0x0011,
		DST_TYPE_CENTER = 0x0012,
		DST_TYPE_LFET_CHANNEL = 0x0013,
		DST_TYPE_LEFT_REAR = 0x0014,
		DST_TYPE_RIGHT_REAR = 0x0015,
		DST_TYPE_CHORUS = 0x0080,
		DST_TYPE_REVERB = 0x0081,

		// MODULATOR LFO DESTINATIONS
		DST_TYPE_LFO_FREQUENCY = 0x0104,
		DST_TYPE_LFO_START_DELAY = 0x0105,

		// VIBRATO LFO DESTINATIONS
		DST_TYPE_VIB_FREQUENCY = 0x0114,
		DST_TYPE_VIB_START_DELAY = 0x0115,

		// EG1 DESTINATIONS
		DST_TYPE_EG1_ATTACK_TIME = 0x0206,
		DST_TYPE_EG1_DECAY_TIME = 0x0207,
		DST_TYPE_EG1_RESERVED = 0x0208,
		DST_TYPE_EG1_RELEASE_TIME = 0x0209,
		DST_TYPE_EG1_SUSTAIN_LEVEL = 0x020A,
		DST_TYPE_EG1_DELAY_TIME = 0x020B,
		DST_TYPE_EG1_HOLD_TIME = 0x020C,
		DST_TYPE_EG1_SHUTDOWN_TIME = 0x020D,

		// EG2 DESTINATIONS
		DST_TYPE_EG2_ATTACK_TIME = 0x030A,
		DST_TYPE_EG2_DECAY_TIME = 0x030B,
		DST_TYPE_EG2_RESERVED = 0x030C,
		DST_TYPE_EG2_RELEASE_TIME = 0x030D,
		DST_TYPE_EG2_SUSTAIN_LEVEL = 0x030E,
		DST_TYPE_EG2_DELAY_TIME = 0x030F,
		DST_TYPE_EG2_HOLD_TIME = 0x0310,

		// FILTER DESTINATIONS
		DST_TYPE_FILTER_CUTOFF = 0x0500,
		DST_TYPE_FILTER_Q = 0x0501
	};

	enum TRN_TYPE : USHORT {
		TRN_TYPE_NONE = 0x0000,
		TRN_TYPE_CONCAVE = 0x0001,
		TRN_TYPE_CONVEX = 0x0002,
		TRN_TYPE_SWITCH = 0x0003
	};

	enum CHUNK_TYPE : UINT {
		CHUNK_TYPE_COLH = 0x686C6F63,
		CHUNK_TYPE_VERS = 0x73726576,
		CHUNK_TYPE_MSYN = 0x6E79736D,
		CHUNK_TYPE_PTBL = 0x6C627470,
		CHUNK_TYPE_LIST = 0x5453494C,
		CHUNK_TYPE_DLID = 0x64696C64,
		CHUNK_TYPE_GUID = 0x64697567,
		CHUNK_TYPE_INSH = 0x68736E69,
		CHUNK_TYPE_RGNH = 0x686E6772,
		CHUNK_TYPE_WSMP = 0x706D7377,
		CHUNK_TYPE_WLNK = 0x6B6E6C77,
		CHUNK_TYPE_ART1 = 0x31747261,
		CHUNK_TYPE_ART2 = 0x32747261,
		CHUNK_TYPE_FMT_ = 0x20746D66,
		CHUNK_TYPE_DATA = 0x61746164
	};

	enum LIST_TYPE : UINT {
		LIST_TYPE_LINS = 0x736E696C,
		LIST_TYPE_WVPL = 0x6C707677,
		LIST_TYPE_INFO = 0x4F464E49,
		LIST_TYPE_INS_ = 0x20736E69,
		LIST_TYPE_WAVE = 0x65766177,
		LIST_TYPE_LRGN = 0x6E67726C,
		LIST_TYPE_LART = 0x7472616C,
		LIST_TYPE_LAR2 = 0x3272616C,
		LIST_TYPE_RGN_ = 0x206E6772,
		LIST_TYPE_RGN2 = 0x326E6772
	};

	enum INFO_TYPE : UINT {
		INFO_TYPE_IARL = 0x4C524149, // ArchivalLocation
		INFO_TYPE_IART = 0x54524149, // Artists
		INFO_TYPE_ICMS = 0x534D4349, // Commissioned
		INFO_TYPE_ICMT = 0x544D4349, // Comments
		INFO_TYPE_ICOP = 0x504F4349, // Copyright
		INFO_TYPE_ICRD = 0x44524349, // CreationDate
		INFO_TYPE_IENG = 0x474E4549, // Engineer
		INFO_TYPE_IGNR = 0x524E4749, // Genre
		INFO_TYPE_IKEY = 0x59454B49, // Keywords
		INFO_TYPE_IMED = 0x44454D49, // Medium
		INFO_TYPE_INAM = 0x4D414E49, // Name
		INFO_TYPE_IPRD = 0x44525049, // Product
		INFO_TYPE_ISFT = 0x54465349, // Software
		INFO_TYPE_ISRC = 0x43525349, // Source
		INFO_TYPE_ISRF = 0x46525349, // SourceForm
		INFO_TYPE_ISBJ = 0x4A425349, // Subject
		INFO_TYPE_ITCH = 0x48435449  // Technician
	};
}